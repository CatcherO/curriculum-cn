{
  "name": "Debugging",
  "order": 4,
  "time": "1 hour",
  "helpRoom": "Help",
  "challenges": [
    {
      "id": "587d7b83367417b2b2512b33",
      "title": "Use the JavaScript Console to Check the Value of a Variable",
      "description": [
        "Chrome 和 Firefox 都有出色的 JavaScript 控制台，也称为 DevTools，用于调试你的 JavaScript 代码。",
        "你可以在 Chrome 的菜单中找到开发者工具或 FireFox 的菜单中的 Web 控制台。如果你使用其他浏览器或手机，我们强烈建议你切换到桌面版 Firefox 或 Chrome。",
        "<code>console.log()</code> 方法，将括号内的输出“打印”到控制台，这可能是最有用的调试工具。将它放在代码中的关键点可以显示变量的中间值。在查看输出之前，最好先了解输出应该是什么。在整个代码中使用检查点来查看计算状态将有助于缩小问题所在。",
        "下面是打印 'Hello world！' 到控制台的示例：",
        "<code>console.log('Hello world!');</code>",
        "<hr>",
        "使用 <code>console.log()</code> 方法在代码中注明的地方打印变量 <code>a</code> 的值。"
      ],
      "tests": [
        {
          "text":
            "Your code should use <code>console.log()</code> to check the value of the variable <code>a</code>.",
          "testString":
            "assert(code.match(/console\\.log\\(a\\)/g), 'Your code should use <code>console.log()</code> to check the value of the variable <code>a</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let a = 5;",
            "let b = 1;",
            "a++;",
            "// Add your code below this line",
            "",
            "",
            "let sumAB = a + b;",
            "console.log(sumAB);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b83367417b2b2512b37",
      "title":
        "Understanding the Differences between the freeCodeCamp and Browser Console",
      "description": [
        "你可能已经注意到一些 freeCodeCamp JavaScript 的挑战有他们自己的控制台。这些控制台的行为与你在上一次挑战中使用的浏览器控制台略有不同。",
        "以下挑战旨在强调 freeCodeCamp 控制台与浏览器控制台之间的一些差异。",
        "首先，是浏览器控制台。 当您在浏览器中加载并运行普通 JavaScript 文件时， <code>console.log()</code> 语句将准确打印你要求它打印的内容和次数到浏览器控制台。 在浏览器中的文本编辑器中，过程略有不同，最初可能会让人感到困惑。",
        "传递给文本编辑器块中的 <code>console.log()</code> 的值会运行在每组测试和你在代码中进行的每一次函数调用。",
        "这就产生了一些有趣的行为，并可能在一开始就让您感到困惑，因为您希望仅查看一次的记录值可能会打印出更多次，具体取决于测试次数和传递给这些测试的值。",
        "如果您只想查看单个输出而无需担心测试周期的运行，可以使用 <code>console.clear()</code>。",
        "<hr>",
        "使用 <code>console.log()</code> 在代码中指定的位置打印变量。",
        ""
      ],
      "tests": [
        {
          "text":
            "Use <code>console.log()</code> to print the <code>outputTwice</code> variable.  In your Browser Console this should print out the value of the variable two times.",
          "testString":
            "assert(code.match(/console\\.log\\(outputTwo\\)/g), 'Use <code>console.log()</code> to print the <code>outputTwice</code> variable.  In your Browser Console this should print out the value of the variable two times.');"
        },
        {
          "text":
            "Use <code>console.log()</code> to print the <code>outputOne</code> variable.",
          "testString":
            "assert(code.match(/console\\.log\\(outputOne\\)/g), 'Use <code>console.log()</code> to print the <code>outputOne</code> variable.');"
        },
        {
          "text":
            "Use <code>console.clear()</code> to modify your output so that <code>outputOne</code> variable only outputs once.",
          "testString":
            "assert(code.match(/^(\\s*console.clear\\(\\);?\\s*)$/gm), 'Use <code>console.clear()</code> to modify your output so that <code>outputOne</code> variable only outputs once.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "// Open your browser console",
            "let outputTwo = \"This will print to the browser console 2 times\";",
            "// Use console.log() to print the outputTwo variable",
            "",
            "",
            "let outputOne = \"Try to get this to log only once to the browser console\";",
            "// Use console.clear() in the next line to print the outputOne only once",
            "",
            "",
            "// Use console.log() to print the outputOne variable",
            "",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b84367417b2b2512b34",
      "title": "Use typeof to Check the Type of a Variable",
      "description": [
        "你可以使用 <code>typeof</code> 检查变量的数据结构或类型。在处理多种数据类型时，这个在调试时很有用。如果你认为你正在添加两个数字，但其中一个实际上是一个字符串，则结果可能是意外的。类型错误可能潜伏在计算或函数调用中。当你以 JavaScript 对象（ JSON ）的形式访问和使用外部数据时尤其要小心。",
        "下面是使用 <code>typeof</code> 的一些示例：",
        "<blockquote>console.log(typeof \"\"); // outputs \"string\"<br>console.log(typeof 0); // outputs \"number\"<br>console.log(typeof []); // outputs \"object\"<br>console.log(typeof {}); // outputs \"object\"</blockquote>",
        "JavaScript 识别六种原始（ 不可变 ）数据类型： <code>Boolean</code>, <code>Null</code>, <code>Undefined</code>, <code>Number</code>, <code>String</code>, and <code>Symbol</code> （ ES6 新增 ）和可变项的一种类型： <code>Object</code> 。注意，在 JavaScript 中，数组在本质上是一种对象",
        "<hr>",
        "添加两个 <code>console.log()</code> 语句来检查代码中的两个变量 <code>seven</code> 和 <code>three</code> 的 code>typeof</code> 值。"
      ],
      "tests": [
        {
          "text":
            "Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.",
          "testString":
            "assert(code.match(/console\\.log\\(typeof[\\( ].*\\)?\\)/g).length == 2, 'Your code should use <code>typeof</code> in two <code>console.log()</code> statements to check the type of the variables.');"
        },
        {
          "text":
            "Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.",
          "testString":
            "assert(code.match(/typeof[\\( ]seven\\)?/g), 'Your code should use <code>typeof</code> to check the type of the variable <code>seven</code>.');"
        },
        {
          "text":
            "Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.",
          "testString":
            "assert(code.match(/typeof[\\( ]three\\)?/g), 'Your code should use <code>typeof</code> to check the type of the variable <code>three</code>.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let seven = 7;",
            "let three = \"3\";",
            "console.log(seven + three);",
            "// Add your code below this line",
            ""
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b84367417b2b2512b35",
      "title": "Catch Misspelled Variable and Function Names",
      "description": [
        " <code>console.log()</code> 和 <code>typeof</code> 方法是检查中间值和程序输出类型的两种主要方法。 现在是时候了解一下 bug 出现的常见的情形。一个语法级别的问题是打字太快带来的低级拼写错误。",
        "变量或函数名称中的转置，丢失或错误的大写字符将使浏览器查找不存在的对象，并以引用错误的进行报错。JavaScript 变量和函数名称区分大小写。",
        "<hr>",
        "修复代码中的两个拼写错误，以便 <code>netWorkingCapital</code> 计算有效。"
      ],
      "tests": [
        {
          "text":
            "Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".",
          "testString":
            "assert(netWorkingCapital === 2, 'Check the spelling of the two variables used in the netWorkingCapital calculation, the console output should show that \"Net working capital is: 2\".');"
        },
        {
          "text":
            "There should be no instances of mis-spelled variables in the code.",
          "testString":
            "assert(!code.match(/recievables/g), 'There should be no instances of mis-spelled variables in the code.');"
        },
        {
          "text":
            "The <code>receivables</code> variable should be declared and used properly in the code.",
          "testString":
            "assert(code.match(/receivables/g).length == 2, 'The <code>receivables</code> variable should be declared and used properly in the code.');"
        },
        {
          "text":
            "There should be no instances of mis-spelled variables in the code.",
          "testString":
            "assert(!code.match(/payable;/g), 'There should be no instances of mis-spelled variables in the code.');"
        },
        {
          "text":
            "The <code>payables</code> variable should be declared and used properly in the code.",
          "testString":
            "assert(code.match(/payables/g).length == 2, 'The <code>payables</code> variable should be declared and used properly in the code.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let receivables = 10;",
            "let payables = 8;",
            "let netWorkingCapital = recievables - payable;",
            "console.log(`Net working capital is: ${netWorkingCapital}`);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b84367417b2b2512b36",
      "title": "Catch Unclosed Parentheses, Brackets, Braces and Quotes",
      "description": [
        "要注意的另一个语法错误是所有的左括号、方括号、花括号和引号，都有结束对。当你编辑代码并插入新代码其中带有括号时，很容易忘记括号闭合。 此外，在将代码块嵌套到其他代码块时要小心，例如将回调函数作为参数添加到方法中。",
        "避免这种错误的一种方法是，只要输入开头字符，立即包括结束匹配，然后将光标移回它们之间并继续编码。幸运的是，大多数现代代码编辑器会自动生成对的后半部分。",
        "<hr>",
        "修复代码中的两对错误。"
      ],
      "tests": [
        {
          "text": "Your code should fix the missing piece of the array.",
          "testString":
            "assert(code.match(/myArray\\s*?=\\s*?\\[\\s*?1\\s*?,\\s*?2\\s*?,\\s*?3\\s*?\\];/g), 'Your code should fix the missing piece of the array.');"
        },
        {
          "text":
            "Your code should fix the missing piece of the <code>.reduce()</code> method. The console output should show that \"Sum of array values is: 6\".",
          "testString":
            "assert(arraySum === 6, 'Your code should fix the missing piece of the <code>.reduce()</code> method. The console output should show that \"Sum of array values is: 6\".');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let myArray = [1, 2, 3;",
            "let arraySum = myArray.reduce((previous, current =>  previous + current);",
            "console.log(`Sum of array values is: ${arraySum}`);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b84367417b2b2512b37",
      "title": "Catch Mixed Usage of Single and Double Quotes",
      "description": [
        "JavaScript允许使用单引号 ('') 和双引号 (\"\") 来声明字符串。决定使用哪一个通常看个人偏好，但有一些例外。 ",
        "当一个字符串有收缩或另一段带引号的文本时，有两个选择是很好的。请注意，不要过早关闭字符串，这会导致语法错误。",
        "下面是混合使用引号的一些示例：",
        "<blockquote>// These are correct:<br>const grouchoContraction = \"I've had a perfectly wonderful evening, but this wasn't it.\";<br>const quoteInString = \"Groucho Marx once said 'Quote me as saying I was mis-quoted.'\";<br>// This is incorrect:<br>const uhOhGroucho = 'I've had a perfectly wonderful evening, but this wasn't it.';</blockquote>",
        "当然，只使用一种引号是可以的。你可以使用反斜杠 (\\) 转义字符来转义字符串中的引号：",
        "<blockquote>// Correct use of same quotes:<br>const allSameQuotes = 'I\\'ve had a perfectly wonderful evening, but this wasn\\'t it.';</blockquote>",
        "<hr>",
        "修复字符串，对 <code>href</code> 属性的值使用不同的引号，或者转义现有的引号。整个字符串使用双引号。"
      ],
      "tests": [
        {
          "text":
            "Your code should fix the quotes around the <code>href</code> value \"#Home\" by either changing or escaping them.",
          "testString":
            "assert(code.match(/<a href=\\s*?('|\\\\\")#Home\\1\\s*?>/g), 'Your code should fix the quotes around the <code>href</code> value \"#Home\" by either changing or escaping them.');"
        },
        {
          "text":
            "Your code should keep the double quotes around the entire string.",
          "testString":
            "assert(code.match(/\"<p>.*?<\\/p>\";/g), 'Your code should keep the double quotes around the entire string.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let innerHtml = \"<p>Click here to <a href=\"#Home\">return home</a></p>\";",
            "console.log(innerHtml);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b85367417b2b2512b38",
      "title": "Catch Use of Assignment Operator Instead of Equality Operator",
      "description": [
        "分支程序，即在满足某些条件时执行不同操作的程序，依赖于 JavaScript中的  <code>if</code> ， <code>else if</code> ， 和 <code>else</code> 语句。 条件有时采取测试一个结果是否等于一个值的形式。",
        "这种逻辑（至少在英语中）是 “如果 x 等于 y ，则......”，它可以使用  <code>=</code> 或赋值运算符逐字地转换为代码。这会导致程序中出现意外的控制流。",
        "如前面的挑战所述，JavaScript 中的赋值运算符 (<code>=</code>) 为变量名赋值。并且 <code>==</code> 和 <code>===</code> 运算符检查相等性（严格相等由 3 个等号<code>===</code>测试，意味着值和类型都相同）。As covered in previous challenges, the assignment operator (<code>=</code>) in JavaScript assigns a value to a variable name. And the <code>==</code> and <code>===</code> operators check for equality (the triple <code>===</code> tests for strict equality, meaning both value and type are the same).",
        "下面的代码将 x 指定为 <code>x</code> ，其值为 true 。几乎 JavaScript 中的每个值都视为 <code>true</code> ，除了所谓的 \"falsy\" 值，即： <code>false</code>, <code>0</code>, <code>\"\"</code> （空字符串），<code>NaN</code>， <code>undefined</code>， and <code>null</code> 。",
        "<blockquote>let x = 1;<br>let y = 2;<br>if (x = y) {<br>&nbsp;&nbsp;// this code block will run for any value of y (unless y were originally set as a falsy)<br>} else {<br>&nbsp;&nbsp;// this code block is what should run (but won't) in this example<br>}</blockquote>",
        "<hr>",
        "修复条件语句，以便程序运行正确的分支，并为 <code>result</code> 分配适当的值。"
      ],
      "tests": [
        {
          "text":
            "Your code should fix the condition so it checks for equality, instead of using assignment.",
          "testString":
            "assert(result == \"Not equal!\", 'Your code should fix the condition so it checks for equality, instead of using assignment.');"
        },
        {
          "text":
            "The condition can use either <code>==</code> or <code>===</code> to test for equality.",
          "testString":
            "assert(code.match(/x\\s*?===?\\s*?y/g), 'The condition can use either <code>==</code> or <code>===</code> to test for equality.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "let x = 7;",
            "let y = 9;",
            "let result = \"to come\";",
            "",
            "if(x = y) {",
            "  result = \"Equal!\";",
            "} else {",
            "  result = \"Not equal!\";",
            "}",
            "",
            "console.log(result);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b85367417b2b2512b39",
      "title":
        "Catch Missing Open and Closing Parenthesis After a Function Call",
      "description": [
        "当函数或方法不接受任何参数时，您可能忘记在调用它时加上（）左括号和右括号。通常，函数调用的结果会保存在变量中，以供代码中的其他用途使用。可以通过将变量值（或其类型）打印到控制台，会看到是一个函数引用而不是函数调用的返回值来检测此错误。",
        "下面示例中的两个变量是不同的:",
        "<blockquote>function myFunction() {<br>&nbsp;&nbsp;return \"You rock!\";<br>}<br>let varOne = myFunction; // set to equal a function<br>let varTwo = myFunction(); // set to equal the string \"You rock!\"</blockquote>",
        "<hr>",
        "修复代码，使变量 <code>result</code> 设置为调用函数 <code>getNin​​e</code> 返回的值。"
      ],
      "tests": [
        {
          "text":
            "Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.",
          "testString":
            "assert(result == 9, 'Your code should fix the variable <code>result</code> so it is set to the number that the function <code>getNine</code> returns.');"
        },
        {
          "text": "Your code should call the <code>getNine</code> function.",
          "testString":
            "assert(code.match(/getNine\\(\\)/g).length == 2, 'Your code should call the <code>getNine</code> function.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function getNine() {",
            "  let x = 6;",
            "  let y = 3;",
            "  return x + y;",
            "}",
            "",
            "let result = getNine;",
            "console.log(result);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b85367417b2b2512b3a",
      "title":
        "Catch Arguments Passed in the Wrong Order When Calling a Function",
      "description": [
        "继续讨论调用函数，需要注意的下一个 bug 是函数的参数传递顺序错误。 如果参数分别是不同的类型，例如接受数组和整数两个参数的函数，可能会引发运行时错误。 确保以正确的顺序提供所有必需的参数以避免这些问题。",
        "<hr>",
        "函数 <code>raiseToPower</code> 返回基数 (base) 的指数 (exponent) 次幂。不幸的是，它没有被正确调用 ———— 修复代码，使 <code>power</code> 的值是预期的 8。"
      ],
      "tests": [
        {
          "text":
            "Your code should fix the variable <code>power</code> so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.",
          "testString":
            "assert(power == 8, 'Your code should fix the variable <code>power</code> so it equals 2 raised to the 3rd power, not 3 raised to the 2nd power.');"
        },
        {
          "text":
            "Your code should use the correct order of the arguments for the <code>raiseToPower</code> function call.",
          "testString":
            "assert(code.match(/raiseToPower\\(\\s*?base\\s*?,\\s*?exp\\s*?\\);/g), 'Your code should use the correct order of the arguments for the <code>raiseToPower</code> function call.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function raiseToPower(b, e) {",
            "  return Math.pow(b, e);",
            "}",
            "",
            "let base = 2;",
            "let exp = 3;",
            "let power = raiseToPower(exp, base);",
            "console.log(power);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b86367417b2b2512b3b",
      "title": "Catch Off By One Errors When Using Indexing",
      "description": [
        "当你试图访问字符串或数组的特定索引（分割或访问一个片段）或循环索引时，会出现 <code>Off by one errors</code> 错误（有时称为OBOE）。 JavaScript索引从 <code>0</code>开始，而不是<code>1</code>，这意味着最后一个索引总是小于项目的长度。 如果您尝试访问等于长度的索引，程序可能会抛出“索引超出范围”引用错误或打印出 <code>undefined</code>。",
        "当你使用将索引范围作为参数的字符串或数组方法时，它有助于阅读文档并了解它们是否包含（指定索引处的项目是否是返回的一部分）。以下是一些错误的示例：",
        "<blockquote>let alphabet = \"abcdefghijklmnopqrstuvwxyz\";<br>let len = alphabet.length;<br>for (let i = 0; i <= len; i++) {<br>&nbsp;&nbsp;// loops one too many times at the end<br>&nbsp;&nbsp;console.log(alphabet[i]);<br>}<br>for (let j = 1; j < len; j++) {<br>&nbsp;&nbsp;// loops one too few times and misses the first character at index 0<br>&nbsp;&nbsp;console.log(alphabet[j]);<br>}<br>for (let k = 0; k < len; k++) {<br>&nbsp;&nbsp;// Goldilocks approves - this is just right<br>&nbsp;&nbsp;console.log(alphabet[k]);<br>}</blockquote>",
        "<hr>",
        "修复以下函数中的两个索引错误，以便将 1 到 5 之间的数字打印到控制台。"
      ],
      "tests": [
        {
          "text":
            "Your code should set the initial condition of the loop so it starts at the first index.",
          "testString":
            "assert(code.match(/i\\s*?=\\s*?0\\s*?;/g).length == 1, 'Your code should set the initial condition of the loop so it starts at the first index.');"
        },
        {
          "text":
            "Your code should fix the initial condition of the loop so that the index starts at 0.",
          "testString":
            "assert(!code.match(/i\\s?=\\s*?1\\s*?;/g), 'Your code should fix the initial condition of the loop so that the index starts at 0.');"
        },
        {
          "text":
            "Your code should set the terminal condition of the loop so it stops at the last index.",
          "testString":
            "assert(code.match(/i\\s*?<\\s*?len\\s*?;/g).length == 1, 'Your code should set the terminal condition of the loop so it stops at the last index.');"
        },
        {
          "text":
            "Your code should fix the terminal condition of the loop so that it stops at 1 before the length.",
          "testString":
            "assert(!code.match(/i\\s*?<=\\s*?len;/g), 'Your code should fix the terminal condition of the loop so that it stops at 1 before the length.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function countToFive() {",
            "  let firstFive = \"12345\";",
            "  let len = firstFive.length;",
            "  // Fix the line below",
            "  for (let i = 1; i <= len; i++) {",
            "  // Do not alter code below this line",
            "    console.log(firstFive[i]);",
            "  }",
            "}",
            "",
            "countToFive();"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b86367417b2b2512b3c",
      "title": "Use Caution When Reinitializing Variables Inside a Loop",
      "description": [
        "有时需要在循环中保存信息，增加计数器或重置变量。一个潜在的问题是变量什么时候该重新初始化，什么时候不该重新初始化，反之亦然。如果您不小心重置了用于终止条件的变量，导致无限循环，这将特别危险。",
        "使用 <code>console.log()</code> 在每个循环中打印变量值可以发现与重置相关的错误行为，或者重置变量失败。",
        "<hr>",
        "以下函数应该创建一个具有 <code>m</code> 行和 <code>n</code> 列的 零 的二维数组。不幸的是，它没有产生预期的输出，因为<code>row</code>变量没有在外部循环中重新初始化（设置回空数组）。修复代码，使其返回正确的3x2零数组，看起来像 <code>[[0,0]，[0,0]，[0,0]]</code> 。"
      ],
      "tests": [
        {
          "text":
            "Your code should set the <code>matrix</code> variable to an array holding 3 rows of 2 columns of zeroes each.",
          "testString":
            "assert(JSON.stringify(matrix) == \"[[0,0],[0,0],[0,0]]\", 'Your code should set the <code>matrix</code> variable to an array holding 3 rows of 2 columns of zeroes each.');"
        },
        {
          "text": "The <code>matrix</code> variable should have 3 rows.",
          "testString":
            "assert(matrix.length == 3, 'The <code>matrix</code> variable should have 3 rows.');"
        },
        {
          "text":
            "The <code>matrix</code> variable should have 2 columns in each row.",
          "testString":
            "assert(matrix[0].length == 2 && matrix[1].length === 2 && matrix[2].length === 2, 'The <code>matrix</code> variable should have 2 columns in each row.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function zeroArray(m, n) {",
            "  // Creates a 2-D array with m rows and n columns of zeroes",
            "  let newArray = [];",
            "  let row = [];",
            "  for (let i = 0; i < m; i++) {",
            "    // Adds the m-th row into newArray",
            "    ",
            "    for (let j = 0; j < n; j++) {",
            "      // Pushes n zeroes into the current row to create the columns",
            "      row.push(0);",
            "    }",
            "    // Pushes the current row, which now has n zeroes in it, to the array",
            "    newArray.push(row);",
            "  }",
            "  return newArray;",
            "}",
            "",
            "let matrix = zeroArray(3, 2);",
            "console.log(matrix);"
          ],
          "head": [],
          "tail": []
        }
      }
    },
    {
      "id": "587d7b86367417b2b2512b3d",
      "title": "Prevent Infinite Loops with a Valid Terminal Condition",
      "description": [
        "最后一个话题是可怕的无限循环。当你需要程序运行代码块一定次数或满足条件时，循环是很好的工具，但是它们需要终止条件来结束循环。无限循环可能会使浏览器冻结或崩溃，并导致一般程序执行混乱，没有人想要这样的结果。",
        "在本节的介绍中有一个无限循环的例子——它没有终止条件来摆脱 <code>loopy()</code> 内的 <code>while</code> 循环。不要调用这个函数！",
        "<blockquote>function loopy() {<br>&nbsp;&nbsp;while(true) {<br>&nbsp;&nbsp;&nbsp;&nbsp;console.log(\"Hello, world!\");<br>&nbsp;&nbsp;}<br>}</blockquote>",
        "程序员的工作是确保最终达到终止条件，该条件告诉程序何时跳出循环。有一种错误是从终端条件向错误方向递增或递减计数器变量。另一种是在循环代码中意外重置计数器或索引变量，而不是递增或递减它。",
        "<hr>",
        "<code>myFunc()</code> 函数包含一个无限循环，因为终端条件 <code>i != 4</code> 永远不会计算为 <code>false</code> (并中断循环) - <code>i</code> 将每次递增2，然后跳过4，因为 <code>i</code> 是从奇数开始递增。在终端条件中输入比较运算符，使循环仅在 <code>i</code> 小于或等于4的情况下运行。"
      ],
      "tests": [
        {
          "text":
            "Your code should change the comparison operator in the terminal condition (the middle part) of the <code>for</code> loop.",
          "testString":
            "assert(code.match(/i\\s*?<=\\s*?4;/g).length == 1, 'Your code should change the comparison operator in the terminal condition (the middle part) of the <code>for</code> loop.');"
        },
        {
          "text":
            "Your code should fix the comparison operator in the terminal condition of the loop.",
          "testString":
            "assert(!code.match(/i\\s*?!=\\s*?4;/g), 'Your code should fix the comparison operator in the terminal condition of the loop.');"
        }
      ],
      "solutions": [],
      "hints": [],
      "releasedOn": "Feb 17, 2017",
      "challengeType": 1,
      "translations": {},
      "files": {
        "indexjs": {
          "key": "indexjs",
          "ext": "js",
          "name": "index",
          "contents": [
            "function myFunc() {",
            "  for (let i = 1; i != 4; i += 2) {",
            "    console.log(\"Still going!\");",
            "  }",
            "}"
          ],
          "head": [],
          "tail": []
        }
      }
    }
  ]
}
